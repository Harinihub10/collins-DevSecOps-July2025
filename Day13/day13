
 
 
 Create your ec2 instance  t2.large 25gb storage
Install  jenkins docker.io  wget git  
Configure jenkins completely
Install plugins +   pipeline stage view
 Connect tools jdk17 and node16
 Install sonarqube using docker container
Get the api key
Add into jenkins
 
 
 
 
 
Create one t2large instance
 
Apt update and clone the code https://github.com/mdhack0316/DevSecOps-Project
Install docker
Install sonarqube as a container
1.	docker run -d --name sonar -p 9000:9000 sonarqube:lts-community
Install trivy
Login in sonarqube
1.	Admin
2.	Admin
Install jenkins
Install plugins
1.	Nodejs
2.	Eclispe temurin installer
3.	Sonarqube scanner
Set in tools
1.	Manage jenkins  > tools  > JDK installation > name jdk17  > install automatically  jdk-17.0.8.1+1
2.	Manage jenkins > tools > nodejs install > name node16 > nstall automatically > noejs16.2.0
Go to sconar qube > administration  > security > users > crreate token  > name  jenkins > generate copy it
Go to jenkins > manage jenkins > credentials  > secret text  > ID  > Sonar-token
Manage jenkins > system > snarqube >  sonarqube server > name sonar-server  > URL ofsonar sevrer > sonar-token for athentication
Tools > sonarqube scanner instalation > name  sonar-scanner >  install automatically > sonarqcube scanner 5.0.1.3006  apply save
Create pipeline n a new job
Test pipeline
 
 
 
pipeline {
    agent any
    tools {
        jdk 'jdk17'
        nodejs 'node16'
	}
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
	}
    stages {
        stage('clean workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Checkout from Git') {
            steps {
                git branch: 'main', url: 'https://github.com/mdhack0316/DevSecOps-Project.git'
            }
        }
        stage("Sonarqube Analysis") {
            steps {
                withSonarQubeEnv('sonar-server') {
                	sh '''$SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=Netflix \
                    -Dsonar.projectKey=Netflix'''
                }
            }
        }
        stage("quality gate") {
            steps {
                script {
                	waitForQualityGate abortPipeline: false, credentialsId: 'Sonar-token'
                }
            }
        }
        stage('Install Dependencies') {
            steps {
                sh "npm install"
            }
        }
	}
}
 
 
 
 
 
Installl plugins 
Plugins > docker build and push , docker, dockercommons , docker pipeline , docker api dockerbuild step
Create ddocker credential in jenkins
Manage jenkins  > tools >  docker installation > docker > latest version > apply and save
Enable email notificaiton > gmail account  > manage google account  > security > 2fa enable  > search app password > app name devsecopos > create copy password
Dashbard > mange jenkins > system > email notifcaiton > smtp server  > smtp.gmail.com > mayank123modi@gmail.com   > advanced  > use smtp and use ssl > same useremail  > paste pasword tha you got > port  465 > test config  > sameple email > verify email
Manage jenkins > system > extended email notificaiton > smtp server  smtp.gmail.com > smtp port 465 > credentail > use ssll  > default content type > html > trigger always , failue any > apply save
Add in  pipeline post stag esection foremail .
 
 
 
 
 
pipeline {
    agent any
    tools {
        jdk 'jdk17'
        nodejs 'node16'
	}
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
	}
    stages {
        stage('clean workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Checkout from Git') {
            steps {
                git branch: 'main', url: 'https://github.com/mdhack0316/DevSecOps-Project.git'
            }
        }
        stage("Sonarqube Analysis") {
            steps {
                withSonarQubeEnv('sonar-server') {
                	sh '''$SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=Netflix \
                    -Dsonar.projectKey=Netflix'''
                }
            }
        }
        stage("quality gate") {
            steps {
                script {
                	waitForQualityGate abortPipeline: false, credentialsId: 'Sonar-token'
                }
            }
        }
        stage('Install Dependencies') {
            steps {
                sh "npm install"
            }
        }
        stage('TRIVY FS SCAN') {
            steps {
                sh "trivy fs . > trivyfs.txt"
            }
        }
        stage("Docker Build & Push"){
            steps{
                script{
                   withDockerRegistry(credentialsId: 'dockercreds', toolName: 'docker'){  
                   	sh "docker build --build-arg TMDB_V3_API_KEY=54800c1cb0fe4277ed6f634014a64fd6 -t mdhack/netflixsecurity ."
                   	sh "docker push mdhack/netflixsecurity"
                	}
                }
            }
        }
        stage("TRIVY"){
            steps{
                sh "trivy image mdhack/netflixsecurity:latest > trivyimage.txt" 
            }
        }
        stage('Deploy to container'){
            steps{
                sh 'docker run -d --name netflix11 -p 8081:80 mdhack/netflixsecurity:latest'
            }
        }
        stage('Asking For Production Release?') {
            steps {
                input 'Release To Production? '
            }
        }
        stage('deploy in kubernetes') {
            steps {
                sh 'kubectl create deployment mayanknetflix --image mdhack/netflixsecurity'
                sh 'kubectl expose deployment mayanknetflix --port 80 --type NodePort'
            }
        }
	}
	post {
        always {
            emailext attachLog: true,
            subject: "'${currentBuild.result}'",
            body: "Project: ${env.JOB_NAME}<br/>" +
               	"Build Number: ${env.BUILD_NUMBER}<br/>" +
               	"URL: ${env.BUILD_URL}<br/>",
            to: 'mayanktrainingdocs@gmail.com',                            	
            attachmentsPattern: 'trivyfs.txt,trivyimage.txt'
        } 
	}
 
}
 
http://44.242.247.45:8080/
 
 
Mayank
Mayank
 
 

